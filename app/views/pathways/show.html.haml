#edit_step_heading
  .row
    .col-md-6
      Viewing all steps
      %br
      in pathway
      %strong
        = @pathway.name

    .col-md-6
      %p.header-help-message
        Click on a step to edit it
        %br
        Steps with red outlines do not have questions or instructions yet
        %br
        Scroll to zoom in or out of the graph
        %br
        Click and drag in empty space to move the graph

.row
  .col-md-10
    .graph-container
      %svg{height: 1000, width: 500, style: "width: 100%; height: 100%;"}
        %g
  .col-md-2
    = render 'steps/sidebar', { page: 'show_pathway' }

:erb
  <script>
    // Adapted from various examples and tutorials including
    // http://cpettitt.github.io/project/dagre-d3/latest/demo/sentence-tokenization.html
    // http://cpettitt.github.io/project/dagre-d3/latest/demo/tcp-state-diagram.html
    // http://cpettitt.github.io/project/dagre-d3/latest/demo/style-attrs.html

    // Create directed graph
    var g = new dagreD3.graphlib.Graph().setGraph({});

    var json = <%= @json_steps.html_safe %>;
    var exit_conditions = json['exit_conditions'];
    var steps = json['steps'];

    // Create a node for each step
    for (i = 0; i < steps.length; i++) {
      var node = steps[i];

      node.label = node.title;
      if (node.actions == '0') {
        node.class = 'no-actions';
      } else {
        node.label += '\n \n' + node.content;
      }

      node.rx = node.ry = 5;

      g.setNode(node.title, node);
    }

    // Create an edge for each exit condition
    for (i = 0; i < exit_conditions.length; i++) {
      var link = exit_conditions[i];

      var score_label;
      if (link.min == link.max) {
        score_label = 'Score: ' + link.min;
      } else {
        score_label = 'Score: ' + link.min + ' to ' + link.max;
      }

      g.setEdge(link.step, link.exit_step, {
        label: score_label, 
        lineInterpolate: 'cardinal'
      });
    }

    // Create the renderer
    var render = new dagreD3.render();

    // Set up an SVG group so that we can translate the final graph
    var svg = d3.select("svg"),
      inner = svg.append("g");

    // Zoom on scroll
    var zoom = d3.behavior.zoom().on("zoom", function() {
      inner.attr("transform", "translate(" + d3.event.translate + ")" +
        "scale(" + d3.event.scale + ")");
    });
    svg.call(zoom);

    // Render final graph
    render(inner, g);

    inner.selectAll("g.node")
      .attr("id", function(v) {
        return g.node(v).id
      });

    // Centre the graph
    var initialScale = 1.5;
    zoom
      .translate([(svg.attr("width") - g.graph().width * initialScale) + 500 / 2, 50])
      .scale(initialScale)
      .event(svg);
    svg.attr('height', g.graph().height * initialScale + 40);

    $('g.node').click(function() {
      window.location.href = '/pathways/' + <%= @pathway.id %> + '/steps/' + $(this).attr('id') + '/edit';
    });

  </script>
